[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly, render_widget\nfrom palmerpenguins import load_penguins# This package provides the Palmer Penguins dataset\nimport palmerpenguins\nimport pandas as pd\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom shiny import reactive, render, req\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\n# Name the page\nui.page_opts(title=\"TFMONTAGUE's Penguin Data\", fillable=True)\n\n# Customize the dashboard style\nui.HTML(\"\"\"\n<style>\n  body {\n    background-color: #808080; /* dark grey background */\n    color: #333; /* Dark grey text */\n  }\n  .shiny-input-container > label, .shiny-widget-output-header {\n    color: #005b96; /* Dark blue for headings and labels */\n  }\n  .card {\n    background-color: #f0f4f8; /* light blue background for cards */\n    border-radius: 8px; /* Rounded corners for cards */\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow for cards */\n    margin-bottom: 20px; /* Space between cards */\n  }\n  .btn-primary {\n    background-color: #007bff; /* Blue button backgrounds */\n    border-color: #007bff; /* Blue button borders */\n  }\n  .form-control, .selectize-control.single .selectize-input, .selectize-dropdown {\n    border-radius: 4px; /* Rounded corners for input fields and selectize dropdown */\n  }\n</style>\n\"\"\")\n\n# Add a Shiny UI sidebar for user interaction with accordion_panel configuration options\nwith ui.sidebar(open=\"open\"):  \n    # Use ui.HTML() to include an h2 header with custom styling\n    ui.HTML('<h3 style=\"font-size: medium;\">Dashboard Configuration Options</h3>')\n\n    with ui.accordion():\n        # Create dropdown input\n        with ui.accordion_panel(\"Attribute Selection\"):\n            ui.input_selectize(\"selected_attribute\", \"Select an attribute:\", \n                          [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"])\n\n        # Create numeric input for number of plotly histogram bins\n        with ui.accordion_panel(\"Histogram Bins Configuration\"):\n            ui.input_numeric(\"plotly_bin_count\", \"# of Histogram Bins:\", value=20, min=1, max=100)\n\n        # Create slider input for number of seaborn bins\n        with ui.accordion_panel(\"Seaborn Bins Slider\"):\n            ui.input_slider(\"seaborn_bin_count\", \"# of Seaborn Bins:\", min=1, max=50, value=10)\n\n        # Create checkbox for species group input\n        with ui.accordion_panel(\"Species Filter\"):\n            ui.input_checkbox_group(\"selected_species_list\", \"Filter by Species:\", \n                                choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"], \n                                selected=[\"Adelie\"], inline=True)\n\n        # Create checkbox group for island selection\n        with ui.accordion_panel(\"Island Filter\"):\n            ui.input_checkbox_group(\"selected_island_list\", \"Filter by Island:\", \n                                choices=[\"Torgersen\", \"Biscoe\", \"Dream\"], \n                                selected=[\"Torgersen\", \"Biscoe\", \"Dream\"], inline=True)\n    \n    # Add horizontal rule to sidebar\n    ui.hr()\n\n    # Add hyperlink to github repo\n    ui.a(\"TFMONTAGUE's P2 Repo\", href=\"https://github.com/tfmontague/cintel-02-data\", target=\"_blank\")\n\n    # Create text output of selected inputs\n    @render.ui\n    def selected_info2():\n        selected_attribute = input.selected_attribute()\n        plotly_bin_count = input.plotly_bin_count()\n        seaborn_bin_count = input.seaborn_bin_count()\n        selected_species = input.selected_species_list()  # Get the selected species from the checkbox group\n        selected_species_str = \", \".join(selected_species)\n        selected_island = input.selected_island_list()  # Get the selected islands from the checkbox group\n        selected_island_str = \", \".join(selected_island)\n        \n        # Style text output\n        info_html = f\"\"\"\n        <div style=\"font-size: 65%; line-height: 1;\">\n            <h6 style=\"margin-bottom: 0;\">Selected Configuration:</h6>\n            <p style=\"margin-top: 1; margin-bottom: 1;\"><strong>Selected attribute:</strong> {selected_attribute}</p>\n            <p style=\"margin-top: 1; margin-bottom: 1;\"><strong>Plotly bin count:</strong> {plotly_bin_count}</p>\n            <p style=\"margin-top: 1; margin-bottom: 1;\"><strong>Seaborn bin count:</strong> {seaborn_bin_count}</p>\n            <p style=\"margin-top: 1; margin-bottom: 1;\"><strong>Selected species:</strong> {selected_species_str}</p>\n            <p style=\"margin-top: 1; margin-bottom: 1;\"><strong>Selected islands:</strong> {selected_island_str}</p>\n        </div>\n        \"\"\"\n        return ui.HTML(info_html)\n\n# Main content\nwith ui.layout_columns():\n    \n    # Display DataTable with all data\n    with ui.card():\n        ui.card_header(\"Palmer Penguins Data Table\")\n        penguins = load_penguins()\n        @render.data_frame\n        def render_penguins_table():\n            return filtered_data()\n            \n    # Display DataGrid with all data\n    with ui.card():\n        ui.card_header(\"Palmer Penguins Data Grid\")\n        @render.data_frame\n        def penguins_data():\n            return render.DataGrid(filtered_data(), row_selection_mode=\"multiple\")\n\n\nwith ui.layout_columns():\n    # Create Plotly Histogram with all species\n    with ui.card():\n        ui.card_header(\"Plotly Histogram: All Species\")\n        @render_plotly  \n        def plotly_histogram():  \n            return px.histogram(\n              filtered_data(), \n              x=input.selected_attribute(), \n              nbins=input.plotly_bin_count(),  # Add a comma here\n              color=\"species\",\n              )     \n\n    # Create Seaborn Histogram with all species\n    with ui.card():\n        ui.card_header(\"Seaborn Histogram: All Species\")\n        @render.plot\n        def seaborn_histogram():\n            # Generate the Seaborn histogram based on the selected attribute and bin count\n            ax = sns.histplot(data=penguins, x=input.selected_attribute(), bins=input.seaborn_bin_count())  \n            ax.set_title(\"Palmer Penguins\")\n            ax.set_xlabel(input.selected_attribute())  # Use the selected attribute as the x-axis label\n            ax.set_ylabel(\"Count\")\n            return ax           \n\n# Create full screen card for Plotly Scatterplot\nwith ui.card(full_screen=True):\n    ui.card_header(\"Plotly Scatterplot: Species\")\n    @render_plotly\n    def plotly_scatterplot():\n        return px.scatter(filtered_data(),\n            x=\"flipper_length_mm\",\n            y=\"body_mass_g\",\n            color=\"species\",\n            hover_name=\"island\",\n            labels={\n                \"flipper_length_mm\": \"Flipper Length (mm)\",\n                \"body_mass_g\": \"Body Mass (g)\",\n                \"species\": \"Species\",\n                \"bill_length_mm\": \"Bill Length (mm)\",\n                \"island\": \"Island\"\n            },\n            title=\"Penguin Species Measurements\",\n            size_max=12\n        )\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n# Reactive calculation to filter the data by selected species and islands\n@reactive.calc\ndef filtered_data():\n    selected_species = input.selected_species_list()\n    selected_islands = input.selected_island_list()  # Get the list of selected islands\n    filtered_df = penguins_df[(penguins_df['species'].isin(selected_species)) & \n                              (penguins_df['island'].isin(selected_islands))]  # Apply both filters\n    return filtered_df\n\n\n\n\n", "type": "text"}]